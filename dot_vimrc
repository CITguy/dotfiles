set nocompatible " Reset to Vim defaults (not Vi)

" --------------------------------------------------------------------------------
" Flags (boolean options)
" --------------------------------------------------------------------------------
set noautoindent " Use smartindent instead [see `smartindent`]
set   autoread " autoread files if they change outside of Vim
set nocursorcolumn " [cuc] toggle display of  cursor column
set   cursorline " Show Cursor Line
set noerrorbells
set   equalalways " equals window sizes on add/remove of new window
set   expandtab
set noexrc " Do NOT auto load .vimrc, .exrc, and .gvimrc in the current directory (#SECURITY)
set   foldenable " enable folding
set   hlsearch " switch on highlighting for the last used search pattern
set   incsearch " do incremental searching
set   lazyredraw "  seems to help when trying to  edit file with deep folds
set nolinebreak " don't wrap long lines via 'breakat' chars
set nolist " toggle display of hidden chracters (tab, space, $) [see `listchars`]
set   number " display current line number
set   relativenumber " toggle relative line numbers from current line [see `number`]
set   ruler " toggle display of cursor position (`statusline` overrides this setting) [see `statusline`]
"set   showcmd " toggle display of incomplete commands (ON with `nocompatible`)
"set   showmode " (ON with `nocompatible`)
set   smartindent
set   smarttab
set   visualbell
set   wildmenu


"call pathogen#infect()
"Use vim8 packages (:help packages)

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50  " keep 50 lines of command line history

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  "set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 80 characters.
  autocmd FileType text setlocal textwidth=80

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
  augroup END
else
  set autoindent    " always set autoindenting on
endif " has("autocmd")


" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()


" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis
endif

set t_Co=256 " use 256 color in terminal

set ts=2 " Set Tab stop width (2 spaces per tab)
set sw=2 " Set shift width (2 spaces)
set so=4 " Set scrolloff (number of lines to show around the cursor)
set siso=4  " Set side scrolloff, similar to scrolloff but horizontal
set ch=1 " Set cmdheight lines
set laststatus=2
set nowrap " don't wrap lines
set title
set mh " hide the mouse when typing text
set mouse-=a " disable visual selection mode for mouse"
set mm=10240 " 10MB limit (per file) memory usage
set mmt=2000000 " No limit on total memory usage
"set ssop=folds,help,tabpages,unix
"set shm=aToO " Shortmess info, see :shortmess
set listchars=tab:..,eol:$
set ttyfast " (use locally) indicates a fast terminal connection

" This is to limit the syntax-highlighting to the first 120 columns
" Useful for files with very long lines
"set synmaxcol=120

set wildignore=*.swp,*.bak,*.pyc,*.class


" folding settings
set foldmethod=indent " fold based on indent
set foldcolumn=0 " No foldcolumn
set foldnestmax=10 " deepest fold is 10 levels
set foldlevel=10 " keep ALL folds open on file open (must be GTE than foldnestmax)


" ===========================================================
" MAPPINGS
" ===========================================================
let mapleader=","

" mapping CTRL+Arrow to switch between split windows
map <C-H> <C-W><Left>
map <C-J> <C-W><Down>
map <C-K> <C-W><Up>
map <C-L> <C-W><Right>

nmap <Leader>n :NERDTreeToggle<CR>
" Turn off K binding (disable keyword lookup under the cursor)
noremap K <NOP>
" Don't use Ex mode, use Q for formatting
map Q gq
" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>
" Disable Highlighting
noremap <C-\> :nohls<CR>


" This is so snipMate works
":filetype plugin on

" Dark Yellow for columns 81-100
"highlight OverLengthWarn ctermfg=DarkYellow guibg=#595959
"match OverLengthWarn /\%>80v\%<101v/

" Dark Red for columns 101+
"highlight OverLengthDanger ctermfg=DarkRed guibg=#592929
"2match OverLengthDanger /\%>100v.\+/

colorscheme tir_black " included with citguy-vim



" [default value] Can't see info at start of line with lengthy buffer path present
"                 Pushes info out of view to the left.
"set statusline=%{&ff}\ %{&fenc}\ \b%1.3n\ %Y\ %r\ %W\ %m\ %F%=\ %1.7c\ %1.7l/%L\ %p%%
